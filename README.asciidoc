:toc:
:toclevels: 1
:toc-placement!:
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

= sierra-record-id

Makes, parses, converts and validates the various kinds of identifying a record in Sierra.

toc::[]




== How to use

[source,bash]
npm install 'SydneyUniLibrary/sierra-record-id#v1.0'


=== How to set up for virtual records

If you need to converting to or from database ids for virtual records, you will need to set up access to the Sierra
database. Follow the instruction on https://github.com/SydneyUniLibrary/sierra-db-as-promised#how-to-use[how to use sierra-db-as-promised].
If you don't do this, then `sierra-record-id` will throw an error if you try to translate to or from the database id
for a virtual record.

=== How to set up for Sierra API URLs

If you need to convert to absolute API URLs you will need to configure Sierra's host name. You do this in a way that is
compatible with https://github.com/SydneyUniLibrary/sierra-api-as-promised[sierra-api-as-promised].
In other words, if you have already set up `sierra-api-as-promised` you are already set up for using Sierra API URIs
with `sierra-record-id`.

At a minimum, you need to set `SIERRA_API_HOST` in your process's environment.

You can do that in any manner you choose. However if you create a `.env` file in the root directory of your project like
the following, `sierra-record-id` will read it and set up your process's environment for you.

[source]
SIERRA_API_HOST=sierra.library.edu

[NOTE]
`SIERRA_API_HOST` needs to be the name of Sierra's application server, and not Sierra's database server.




== Kinds of records id

`sierra-record-id` uses the following terminology/nomenclature to refer to the different kinds of record id in Sierra.

More details are on https://github.com/SydneyUniLibrary/sierra-record-id/wiki/Kinds-of-record-id[the wiki page].

[options="header"]
|===
| Term                | `RecordIdKind`        | Example            | Virtual record example
| Record number       | `RECORD_NUMBER`       | `3696836`          | `587634@abcde`
| Weak record key     | `WEAK_RECORD_KEY`     | `i3696836`         | `i587634@abcde`
| Strong record key   | `STRONG_RECORD_KEY`   | `i36968365`        | `i5876345@abcde`
| Database id         | `DATABASE_ID`         | `450975262916`     | `28192594886437`
| Relative v4 API URL | `RELATIVE_V4_API_URL` | `v4/items/3696836` | `v4/items/587634@abcde`
| Absolute v4 API URL
| `ABSOLUTE_V4_API_URL`
| `https://sierra.library.edu/iii/sierra-api/v4/items/3696836`
| `https://sierra.library.edu/iii/sierra-api/v4/items/587634@abcde`
|===

There is an additional `RecordIdKind` not mention in the table above, which is `AMBIGUOUS_RECORD_KEY`.
`detect` returns `AMBIGUOUS_RECORD_KEY` if it cannot determine if a record key is weak or strong.




== convert

CAUTION: You cannot use `convert` when converting to or from a database id for a virtual record.
         You must use `convertAsync` in this situation because of the potential database access.
         If you try to use `convert`, it will throw an error.

=== Synopsis

[source,js]
----
convert({
    id: Number | String,
    to: a symbol in RecordIdKind,
    from: a symbol in RecordIdKind = undefined,
    recordTypeCode: String = undefined,
    initialPeriod: Boolean = false,
    strongKeysForVirtualRecords: Boolean = false,
}) => String
----

=== Examples

TIP: Any combination of from and to is possible, not just the ones demonstrated here.

[source,js]
----
const { convert, RecordIdKind } = require('@sydneyunilibrary/sierra-record-id')

convert({ id: 558315, to: RecordIdKind.WEAK_RECORD_KEY, recordTypeCode: 'o' })
// => 'o558315'

convert({ id: '558315', to: RecordIdKind.WEAK_RECORD_KEY, recordTypeCode: 'o' })
// => 'o558315'

convert({ id: '558315', to: RecordIdKind.WEAK_RECORD_KEY, recordTypeCode: 'o', initialPeriod: true })
// => '.o558315'

convert({ id: 'o558315', to: RecordIdKind.RECORD_NUMBER })
// => '558315'

convert({ id: 'o558315', to: RecordIdKind.STRONG_RECORD_KEY })
// => 'o5583159'

convert({ id: '.o558315', to: RecordIdKind.STRONG_RECORD_KEY })
// => 'o5583159'

convert({ id: 'o558315', to: RecordIdKind.STRONG_RECORD_KEY, initialPeriod: true })
// => '.o5583159'

convert({ id: 'o558315', to: RecordIdKind.DATABASE_ID })
// => '476741928171'

convert({ id: '476741928171', to: RecordIdKind.RELATIVE_V4_API_URL })
// => 'v4/orders/558315'

convert({ id: '476741928171', to: RecordIdKind.ABSOLUTE_V4_API_URL })
// => 'https://sierra.library.usyd.edu.au/iii/sierra-api/v4/orders/558315'
----

==== Converting from ambiguous record keys

CAUTION: Records that have 7 digits are ambiguous. So you have to give the `from` parameter to specify if you are
         converting from a strong record key or a weak record key.

[source,js]
----
const { convert, RecordIdKind } = require('@sydneyunilibrary/sierra-record-id')

convert({ id: 'b3384639', from: RecordIdKind.WEAK_RECORD_KEY, to: RecordIdKind.DATABASE_ID })
// => '420910179640'  Because record num is 3384632

convert({ id: 'b3384639', from: RecordIdKind.STRONG_RECORD_KEY, to: RecordIdKind.DATABASE_ID })
// => '420907133471'  Becasue record num is 338463 and 9 is check digit.

convert({ id: 'b3384639', to: RecordIdKind.DATABASE_ID })
// => throws an error
----

==== Unusual behaviour when converting virtual records id to strong record keys

[source,js]
----
convert({ id: 'i100993', to: RecordIdKind.STRONG_RECORD_KEY)
// => 'i100993x' A strong record key, as expected.

convert({ id: 'i100993@fhill', to: RecordIdKind.STRONG_RECORD_KEY)
// => 'i100993@fhill' !!!! A weak record key, even though we asked for a strong record key !!!!

convert({ id: 'i100993@fhill', to: RecordIdKind.STRONG_RECORD_KEY, strongKeysForVirtualRecords: true)
// => 'i100993x@fhill' Only now it is strong.
----

While this is unusual behaviour, `convert` is doing the right thing(TM).
See the `strongKeysForVirtualRecords` parameter for an explanation.

=== Parameters

CAUTION: You cannot give `RecordIdKind.AMBIGUOUS_RECORD_KEY` as either the `from` or `to` options.
         You must specify if the key is strong or weak.

CAUTION: If you give a `from` parameter but then give `convert` a record id of a different kind, the result of `convert`
         is not defined.

TIP: If you know what you are converting from, specify it in the `from` parameter. `convert` will then not have to call
     `detect` on the id you give it.

[options="header"]
|===
| Parameter | Required | Description

| id
| Yes
| A Number or a String that has the record id you want to convert.

| to
| Yes
| Specify kind of the record id you want to convert to. Use one of the `RecordIdKind` symbols.

| from
| No
| Specify kind of the record id you already have. Use one of the `RecordIdKind` symbols.
  If you don't give the `from` parameter, `convert` will use `detect` to try to determine the kind of the id you gave it.

| recordTypeCode
| Sometimes
| Only applicable when converting from (but not to) a record number, and in which case it is required.
  Specify the record type character of the record whose id you are converting. Give `a` for authority, `i` for item,
  `n` for invoice, and so on.

| initialPeriod
| No
| Defaults to `false`. Only applicable when converting to (but not from) a weak or strong record key.
  If `true` then the record key `convert` returns will start with an initial period. If `false` it won't.

| strongKeysForVirtualRecords
| No
| Defaults to `false`. Only applicable when converting to (but not from) a strong record keys for a virtual record.
  Sierra's own behaviour is to produce weak record keys for virtual records, even in situations where it
  would have produced a strong record key if the record was non-virtual. By default, `convert` will follows this behaviour.
  That is if you don't give the `strongKeysForVirtualRecords` parameter or you give `false` for it, `convert` will
  produce a weak record key for virtual records even if you give `RecordIdKind.STRONG_RECORD_KEY` for the `to` parameter.
  If you really do want strong record keys for virtual records, you need to give `true` for `strongKeysForVirtualRecords`
  in addition to giving `RecordIdKind.STRONG_RECORD_KEY` for the `to` parameter.

|===

=== Errors

`convert` will throw an error (in at least) the following situations.

* You did not give the `from` parameter and `detect` returned `RecordIdKind.AMBIGUOUS_RECORD_KEY` or `undefined`
  for the id you are trying to convert.

* You gave `RecordIdKind.AMBIGUOUS_RECORD_KEY` as either the `from` or `to` parameters.

* You are converting from a record number, but you haven't given the `recordTypeCode` parameter.

* You are converting to an absolute v4 api url but you have not set up for Sierra API URLs.

* You are converting to or from a database id for a virtual record.




== convertAsync

TIP: You must use `convertAsync` when converting to or from a database id for a virtual record.
     If you try to use `convert` in this situation, `convert` will throw an error.

`convertAsync` is the same as `convert` except it potentially does the conversion asynchronously. So it returns a Promise
that will eventually resolve with the kind of record id you want.

In reality, `convertAsync` will do the conversion synchronously except in the case of a database id for a virtual record,
and will return a Promise that is already resolved.

`convertAsync` will maintain a two-way cache of the association between the `@abcde` part of a record number and
the campus id inside a database id. This means only the first time a particular `@abcde` or campus id is encountered will
`convertAsync` need to use the Sierra database and will therefore need to do the conversion asynchronously. After then it
will be able to do conversions for that `@abcce` or campus id synchronously. (Although that doesn't mean you can start
using `convert` instead of `convertAsync`. Sorry.)

=== Synopsis
[source,js]
----
convertAsync({
    id: Number | String,
    to: a symbol in RecordIdKind,
    from: a symbol in RecordIdKind = undefined,
    recordTypeCode: String = undefined,
    initialPeriod: Boolean = false,
    strongKeysForVirtualRecords: Boolean = false,
}) => Promise<String>
----

=== Examples

.Using ECMAScript 2017
[source, js]
----
const { convertAsync, RecordIdKind } = require('@sydneyunilibrary/sierra-record-id')

async function a() {
    await convertAsync('1970745744342089', to: RecordIdKind.WEAK_RECORD_KEY) // => 'b572489@hsill'
}
----

.Using ECMAScript 2016
[source, js]
----
const { convertAsync, RecordIdKind } = require('@sydneyunilibrary/sierra-record-id')

function a() {
    convertAsync('1970745744342089', to: RecordIdKind.WEAK_RECORD_KEY)
    .then(weakRecordKey => {
        // => 'b572489@hsill'
    })
    .catch(err => {
        // Handle the error
    })
}
----


=== Parameters

See `convert` for details on the parameters.

=== Errors

`convertAsync` will not throw an error directly (notwithstanding any bugs). It will always return a Promise.

The Promise returned from `convertAsync` will reject in the same situations in which `convert` would throw an error.
Except of course for when you are converting to or from a database id for a virtual record.




== detect

CAUTION: Take heed that detection is not validation. If you give `detect` a string that is not a valid record id,
         it could incorrectly detect it. Do not rely on `detect` returning `undefined` for invalid record ids.
         Similarly do not assume `detect` not returning `undefined` means the record id is valid.

TIP: You can detect a database id without having set up `sierra-db-as-promised`.
     You can also detect an absolute API URL without having set up `SIERRA_API_HOST`.

=== Synopsis

[source,js]
detect(id: Number | String) => a symbol in RecordIdKind | undefined

=== Examples
[source,js]
----
const { detect, RecordIdKind } = require('@sydneyunilibrary/sierra-record-id')

detect(undefined) // => undefined
detect('') // => undefined
detect('something random, but see the warning above!') // => undefined

detect(3696836) // => RecordIdKind.RECORD_NUMBER
detect('3696836') // => RecordIdKind.RECORD_NUMBER
detect('o369683') // => RecordIdKind.WEAK_RECORD_KEY
detect('i3696836') // => RecordIdKind.AMBIGUOUS_RECORD_KEY
detect('i36968367') // => RecordIdKind.STRONG_RECORD_KEY
detect('450975262916') // => RecordIdKind.DATABASE_ID
detect('v4/items/3696836') // => RecordIdKind.RELATIVE_V4_API_URL
detect('https://sierra.library.edu/iii/sierra-api/v4/items/3696836') // => RecordIdKind.ABSOLUTE_V4_API_URL
----

`detect` correctly detects record keys that have an initial period, for example `.o369683` and `.i36968367`. It also
correctly detects record ids for virtual records like `587634@abcde`, `i587634@abcde`, `.i5876345@abcde` and
`v4/items/587634@abcde`.

* https://github.com/SydneyUniLibrary/sierra-record-id/wiki/Detection-logic[Detection logic]

=== Ambiguous record keys

Because record numbers can be 6 or 7 digits, `i3696836` is ambiguous. It could be a weak record key for the 7 digit
record number `3696836`, or it could be a strong key for the 6 digit record number `369683` with `6` being the check digit.

The previous paragraph notwithstanding, if the key for a 6 digit record number has an `x` check digit
(for example `o100007x`), `detect` will detect it as being strong and not as being ambiguous.




== make

CAUTION: The `make` functions are simple. If you given them garbage, they will produce garbage.
         It is on you to validate the inputs before you attempt to make records ids from them.

=== make.recordNumber

==== Synopsis

[source,js]
make.recordNumber({ recNum: String, campusCode: ?String }) => String

==== Examples

[source,js]
----
const { make } = require('@sydneyunilibrary/sierra-record-id')

make.recordNumber({ recNum: '3696836' }) // => '3696836'
make.recordNumber({ recNum: '587634', campusCode: 'abcde' }) // => '587634@abcde'
----

=== make.weakRecordKey

==== Synopsis

[source,js]
make.weakRecordKey({ recordTypeCode: String, recNum: String, campusCode: ?String,
                     initialPeriod: Boolean = false }) => String

==== Examples

[source,js]
----
const { make } = require('@sydneyunilibrary/sierra-record-id')

make.weakRecordKey({ recordTypeCode: 'i', recNum: '3696836' })
// => 'i3696836'
make.weakRecordKey({ recordTypeCode: 'i', recNum: '3696836', initialPeriod: true })
// => '.i3696836'

make.weakRecordKey({ recordTypeCode: 'i', recNum: '3696836', campusCode: 'abcde' })
// => 'i3696836@abcde'
make.weakRecordKey({ recordTypeCode: 'i', recNum: '3696836', campusCode: 'abcde', initialPeriod: true })
// => '.i3696836@abcde'
----

=== make.strongRecordKey

NOTE: `make.strongRecordKey` does not validate that the check digit you give it is correct for the given rec num.

NOTE: `make.strongRecordKey` will actually make a strong record key for virtual records. It does *not* follow Sierra's
      convention of producing only weak record keys for virtual records.

==== Synopsis

[source,js]
make.strongRecordKey({ recordTypeCode: String, recNum: String, checkDigit: String, campusCode: ?String,
                       initialPeriod: Boolean = false }) => String

==== Examples

[source,js]
----
const { make } = require('@sydneyunilibrary/sierra-record-id')

make.strongRecordKey({ recordTypeCode: 'i', recNum: '3696836', checkDigit: '5' })
// => 'i36968365'
make.strongRecordKey({ recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', initialPeriod: true })
// => '.i36968365'

make.strongRecordKey({ recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', campusCode: 'abcde' })
// => 'i36968365@abcde'
make.strongRecordKey({ recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', campusCode: 'abcde',
                       initialPeriod: true })
// => '.i36968365@abcde'
----

=== make.databaseId

NOTE: When using `make.databaseId` with virtual records you need to give it the campus id and not the campus code.
      It will not convert a campus code into a campus id for you.

==== Synopsis

[source,js]
make.databaseId({ recordTypeCode: String, recNum: String, campusId: Number = 0 }) => String

==== Examples

[source,js]
----
const { make } = require('@sydneyunilibrary/sierra-record-id')

make.databaseId({ recordTypeCode: 'a', recNum: '1687568' })
// => '416613515280'
make.databaseId({ recordTypeCode: 'b', recNum: '2082103', campusId: 62 })
// => '17451869464937783'
----

=== make.relativeV4ApiUrl

NOTE: You need to give `make.relativeV4ApiUrl` an api record type and not a record type code.
      The `convertRecordTypeCodeToApiRecordType` function can help you if you have a record type code.

==== Synopsis

[source,js]
make.relativeV4ApiUrl({ apiRecordType: String, recNum: String, campusCode: ?String }) => String

==== Examples

[source,js]
----
const { make } = require('@sydneyunilibrary/sierra-record-id')

make.relativeV4ApiUrl({ apiRecordType: 'patrons', recNum: '3696836' })
// => 'v4/patrons/3696836'
make.relativeV4ApiUrl({ apiRecordType: 'bibs', recNum: '3696836', campusCode: 'abcde' })
// => 'v4/bibs/3696836@abcde'

const { convertRecordTypeCodeToApiRecordType } = require('@sydneyunilibrary/sierra-record-id')

make.relativeV4ApiUrl({ apiRecordType: convertRecordTypeCodeToApiRecordType('p'), recNum: '3696836' })
// => 'v4/patrons/3696836'
----

=== make.absoluteV4ApiUrl

NOTE: You need to give `make.absoluteV4ApiUrl` an api record type and not a record type code.
      The `convertRecordTypeCodeToApiRecordType` function can help you if you have a record type code.

NOTE: If you don't give the `apiHost` parameter, `make.absoluteV4ApiUrl` with use `SIERRA_API_HOST` in your
      process's environment.

NOTE: If you don't give the `apiPath` parameter, `make.absoluteV4ApiUrl` with use `SIERRA_API_PATH` in your process's
      environment variable. If your process's environment doesn't define `SIERRA_API_PATH`, `make.absoluteV4ApiUrl`
      falls back to `/iii/sierra-api/`.

==== Synopsis

[source,js]
make.absoluteV4ApiUrl({ apiRecordType: String, recNum: String, campusCode: ?String,
                        apiHost: ?String, apiPath: ?String }) => String

==== Examples

[source,js]
----
const { make } = require('@sydneyunilibrary/sierra-record-id')

make.absoluteV4ApiUrl({ apiRecordType: 'patrons', recNum: '3696836',
                        apiHost: 'some.library', apiPath: '/test/beta-api/' })
// => 'https://some.library/test/beta-api/v4/patrons/3696836'
make.absoluteV4ApiUrl({ apiRecordType: 'patrons', recNum: '3696836', campusCode: 'abcde'
                        apiHost: 'some.library', apiPath: '/test/beta-api/' })
// => 'https://some.library/test/beta-api/v4/patrons/3696836@abcde'

// Assuming process.env['SIERRA_API_HOST'] === 'library.uni.edu' and process.env['SIERRA_API_PATH'] === undefined
make.absoluteV4ApiUrl({ apiRecordType: 'patrons', recNum: '3696836' })
// => 'https://library.uni.edu/iii/sierra-api/v4/patrons/3696836'

// Assuming process.env['SIERRA_API_HOST'] === 'library.uni.edu' and process.env['SIERRA_API_PATH'] === '/blah/'
make.absoluteV4ApiUrl({ apiRecordType: 'patrons', recNum: '3696836' })
// => 'https://library.uni.edu/blah/v4/patrons/3696836'

const { convertRecordTypeCodeToApiRecordType } = require('@sydneyunilibrary/sierra-record-id')

// Assuming process.env['SIERRA_API_HOST'] === 'library.uni.edu' and process.env['SIERRA_API_PATH'] === undefined
make.relativeV4ApiUrl({ apiRecordType: convertRecordTypeCodeToApiRecordType('p'), recNum: '3696836' })
// => 'https://library.uni.edu/iii/sierra-api/v4/patrons/3696836'
----




== parse

CAUTION: The `parse` functions don't do much validation. If they can break apart the record id you give them, then they
         will and return a result. Just because you get a result from a `parse` function doesn't mean the record id was
         valid.

=== parse.recordNumber

==== Synopsis

[source,js]
parse.recordNumber(id: String)
    => { recNum: String, campusCode: ?String }

==== Examples

[source,js]
----
const { parse } = require('@sydneyunilibrary/sierra-record-id')

parse.recordNumber('3696836') // => { recNum: '3696836', campusCode: null }
parse.recordNumber('587634@abcde') // => { recNum: '587634', campusCode: 'abcde' }
----

=== parse.weakRecordKey

==== Synopsis

[source,js]
parse.weakRecordKey(id: String)
    => { recordTypeCode: String, recNum: String, campusCode: ?String }

==== Examples

[source,js]
----
const { parse } = require('@sydneyunilibrary/sierra-record-id')

parse.weakRecordKey('i3696836')
// => { recordTypeCode: 'i', recNum: '3696836', campusCode: null }
parse.weakRecordKey('.i3696836')
// => { recordTypeCode: 'i', recNum: '3696836', campusCode: null }
parse.weakRecordKey('i3696836@abcde')
// => { recordTypeCode: 'i', recNum: '3696836', campusCode: 'abcde' }
parse.weakRecordKey('.i3696836@abcde')
// => { recordTypeCode: 'i', recNum: '3696836', campusCode: 'abcde' }
----

=== parse.strongRecordKey

NOTE: `parse.strongRecordKey` does not validate that the check digit is correct for the rec num.

==== Synopsis

[source,js]
parse.strongRecordKey(id: String)
    => { recordTypeCode: String, recNum: String, checkDigit: String, campusCode: ?String }

==== Examples

[source,js]
----
const { parse } = require('@sydneyunilibrary/sierra-record-id')

parse.strongRecordKey('i36968365')
// => { recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', campusCode: null }
parse.strongRecordKey('.i36968365')
// => { recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', campusCode: null }

parse.strongRecordKey('i36968365@abcde')
// => { recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', campusCode: 'abcde' }
parse.strongRecordKey('.i36968365@abcde')
// => { recordTypeCode: 'i', recNum: '3696836', checkDigit: '5', campusCode: 'abcde' }
----

=== parse.databaseId

NOTE: When using `parse.databaseId` with virtual records it will give you the campus id and not the campus code.
      It will not convert a campus id into a campus code for you.

==== Synopsis

[source,js]
parse.databaseId(id: String)
    => { recordTypeCode: String, recNum: String, campusId: Number }

==== Examples

[source,js]
----
const { parse } = require('@sydneyunilibrary/sierra-record-id')

parse.databaseId('416613515280')
// => { recordTypeCode: 'a', recNum: '1687568', campusId: 0 }
parse.databaseId('17451869464937783')
// => { recordTypeCode: 'b', recNum: '2082103', campusId: 62 }
----

=== parse.relativeV4ApiUrl

NOTE: `parse.relativeV4ApiUrl` will give you an api record type and not a record type code.
      The `convertApiRecordTypeToRecordTypeCode` function can help you if you want a record type code.

==== Synopsis

[source,js]
parse.relativeV4ApiUrl(id: String)
    => { apiRecordType: String, recNum: String, campusCode: ?String })

==== Examples

[source,js]
----
const { parse } = require('@sydneyunilibrary/sierra-record-id')

parse.relativeV4ApiUrl('v4/patrons/3696836')
// => { apiRecordType: 'patrons', recNum: '3696836', campusCode: null }
parse.relativeV4ApiUrl('v4/bibs/3696836@abcde')
// => { apiRecordType: 'bibs', recNum: '3696836', campusCode: 'abcde' }

const { convertApiRecordTypeToRecordTypeCode } = require('@sydneyunilibrary/sierra-record-id')

let parsedId = parse.relativeV4ApiUrl('v4/patrons/3696836')
Object.assign(
    parsedId,
    { recordTypeCode: convertApiRecordTypeToRecordTypeCode(parsedId.apiRecordType) }
)
// => { apiRecordType: 'patrons', recordTypeCode: 'p', recNum: '3696836', campusCode: null }
----

=== parse.absoluteV4ApiUrl

NOTE: `parse.absoluteV4ApiUrl` will give you an api record type and not a record type code.
      The `convertApiRecordTypeToRecordTypeCode` function can help you if you want a record type code.

NOTE: `parse.absoluteV4ApiUrl` will not validate the api host or api path of the absolute URL.

==== Synopsis

[source,js]
parse.absoluteV4ApiUrl(id: String)
    => { apiRecordType: String, recNum: String, campusCode: ?String, apiHost: String, apiPath: String }

==== Examples

[source,js]
----
const { parse } = require('@sydneyunilibrary/sierra-record-id')

parse.absoluteV4ApiUrl('https://some.library/iii/sierra-api/v4/patrons/3696836')
// => { apiRecordType: 'patrons', recNum: '3696836',
//      apiHost: 'some.library', apiPath: '/iii/sierra-api/' }

parse.absoluteV4ApiUrl('https://some.library/iii/sierra-api/v4/patrons/3696836@abcde')
// => { apiRecordType: 'patrons', recNum: '3696836', campusCode: 'abcde'
//      apiHost: 'some.library', apiPath: '/iii/sierra-api/' })

const { convertApiRecordTypeToRecordTypeCode } = require('@sydneyunilibrary/sierra-record-id')

let parsedId = parse.relativeV4ApiUrl('https://some.library/iii/sierra-api/v4/patrons/3696836')
Object.assign(
    parsedId,
    { recordTypeCode: convertApiRecordTypeToRecordTypeCode(parsedId.apiRecordType) }
)
// => { apiRecordType: 'patrons', recordTypeCode: 'p', recNum: '3696836', campusCode: null,
//      apiHost: 'some.library', apiPath: '/iii/sierra-api/' }
----




== License

Copyright (c) 2017  The University of Sydney Library

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
